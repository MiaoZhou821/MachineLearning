#!/usr/bin/env python3
import numpy as np



DATA_PATH = "/hmm_smoke_test_files" 


def parse_data(args):
    num = float
    dtype = np.float32
    data = []
    with open(args.data_file, 'r') as f:
        for line in f:
            data.append([num(t) for t in line.split()])
    dev_cutoff = int(.9 * len(data))
    train_xs = np.asarray(data[:dev_cutoff], dtype=dtype)
    dev_xs = np.asarray(data[dev_cutoff:], dtype=dtype) if not args.nodev else None
    return train_xs, dev_xs


def init_model(args):
    if args.cluster_num:
        mus = np.zeros((args.cluster_num, 2))
        if not args.tied:
            sigmas = np.zeros((args.cluster_num, 2, 2))
        else:
            sigmas = np.zeros((2, 2))
        transitions = np.zeros((args.cluster_num,
                                args.cluster_num))  # transitions[i][j] = probability of moving from cluster i to cluster j
        initials = np.zeros(args.cluster_num)  
        mus = np.random.random([mus.shape[0], mus.shape[1]])
        if not args.tied:
            sigmas = np.array([np.eye(2)*3 for i in range(args.cluster_num)])
        else:
            sigmas = np.eye(2)*3
        transitions = np.identity(args.cluster_num)
        initials[:] = 1.0 / args.cluster_num
    else:
        mus = []
        sigmas = []
        transitions = []
        initials = []
        with open(args.clusters_file, 'r') as f:
            for line in f:
                # each line is a cluster, and looks like this:
                # initial mu_1 mu_2 sigma_0_0 sigma_0_1 sigma_1_0 sigma_1_1 transition_this_to_0 transition_this_to_1 ... transition_this_to_K-1
                vals = list(map(float, line.split()))
                initials.append(vals[0])
                mus.append(vals[1:3])
                sigmas.append([vals[3:5], vals[5:7]])
                transitions.append(vals[7:])
        initials = np.asarray(initials)
        transitions = np.asarray(transitions)
        mus = np.asarray(mus)
        sigmas = np.asarray(sigmas)
        args.cluster_num = len(initials)

   
    model = mus, sigmas, initials, transitions
    return model


def forward(model, data, args):
    from scipy.stats import multivariate_normal
    from math import log
    mus, sigmas, initials, transitions = model
    alphas = np.zeros((len(data), args.cluster_num))
    log_likelihood = 0.0
    
    for t in range(len(data)):
        if t == 0:
            for k in range(args.cluster_num):
                if not args.tied:
                    alphas[0, k] = initials[k] * multivariate_normal(mus[k], sigmas[k]).pdf(data[t])
                else:
                    alphas[0, k] = initials[k] * multivariate_normal(mus[k], sigmas).pdf(data[t])
        else:
            for k in range(args.cluster_num):
                if not args.tied:
                    alphas[t, k] = np.sum(alphas[t - 1, :] * transitions[:, k]) * multivariate_normal(mus[k], sigmas[k]).pdf(data[t])
                else:
                    alphas[t, k] = np.sum(alphas[t - 1, :] * transitions[:, k]) * multivariate_normal(mus[k], sigmas).pdf(data[t])
        s = np.sum(alphas[t])
        log_likelihood += np.log(s)
        alphas[t] = alphas[t] / s
    return alphas, log_likelihood



def backward(model, data, args):
    from scipy.stats import multivariate_normal
    betas = np.zeros((len(data), args.cluster_num))
    # TODO: Calculate and return backward probabilities (normalized like in forward before)
    mus, sigmas, initials, transitions = model
    for t in range(len(data) - 1, -1, -1):
        if t == len(data) - 1 :
            for k in range(args.cluster_num):
                betas[t, k] = 1
        else:
            for i in range(args.cluster_num):
                prob = 0.0
                for j in range(args.cluster_num):
                    if not args.tied:
                        prob += betas[t + 1, j] * transitions[i, j] * multivariate_normal(mus[j], sigmas[j]).pdf(data[t + 1])
                    else:
                        prob += betas[t + 1, j] * transitions[i, j] * multivariate_normal(mus[j], sigmas).pdf(data[t + 1])
                betas[t, i] = prob
        betas[t] = betas[t] / np.sum(betas[t])
    return betas


def train_model(model, train_xs, dev_xs, args):
    from scipy.stats import multivariate_normal
   
    mus, sigmas, initials, transitions = model
    for it in range(args.iterations):
        alpha, _ = forward(model, train_xs, args)
        beta = backward(model, train_xs, args)
        gamma = np.zeros((train_xs.shape[0],args.cluster_num))
        epsilon = np.zeros((train_xs.shape[0], args.cluster_num, args.cluster_num))

        # E-step
        for t in range(train_xs.shape[0]):
            for i in range(args.cluster_num):
                gamma[t, i] = alpha[t, i] * beta[t, i]
                if t != 0:
                    for j in range(args.cluster_num):
                        epsilon[t, i, j] = alpha[t - 1, i] * beta[t, j] * transitions[i, j] * \
                                    multivariate_normal(mus[j], sigmas[j]).pdf(train_xs[t])
            gamma[t] = gamma[t] / sum(gamma[t])
            if t != 0 :
                epsilon[t] = epsilon[t] / np.sum(epsilon[t])
        #M-step
        for i in range(args.cluster_num):
            initials[i] = gamma[0, i]
            for j in range(args.cluster_num):
                transitions[j, i] = np.sum(epsilon[:, j, i]) / np.sum(gamma[:, j])
        for k in range(args.cluster_num):
            mus[k] = np.dot(gamma[:, k], train_xs) / np.sum(gamma[:, k])
            if not args.tied:
                sigmas[k] = np.dot(gamma[:, k] * (train_xs - mus[k]).T, train_xs - mus[k]) / np.sum(gamma[:, k])
            else:
                sigmas += np.dot(gamma[:, k] * (train_xs - mus[k]).T, train_xs - mus[k])
        if args.tied:
            sigmas = sigmas / train_xs.shape[0]

        model = (mus, sigmas, initials, transitions)

    return model


def average_log_likelihood(model, data, args):
    ll = 0.0
    _, log_likelihood = forward(model, data, args)
    ll = log_likelihood / data.shape[0]
    return ll


def extract_parameters(model):
   
    mus, sigmas, initials, transitions = model
    return initials, transitions, mus, sigmas


def main():
    import argparse
    import os
    print('Gaussian')  # Do not change, and do not print anything before this.
    parser = argparse.ArgumentParser(description='Use EM to fit a set of points')
    init_group = parser.add_mutually_exclusive_group(required=True)
    init_group.add_argument('--cluster_num', type=int, help='Randomly initialize this many clusters.')
    init_group.add_argument('--clusters_file', type=str, help='Initialize clusters from this file.')
    parser.add_argument('--nodev', action='store_true', help='If provided, no dev data will be used.')
    parser.add_argument('--data_file', type=str, default=os.path.join(DATA_PATH, 'points.dat'), help='Data file.')
    parser.add_argument('--print_params', action='store_true',
                        help='If provided, learned parameters will also be printed.')
    parser.add_argument('--iterations', type=int, default=1, help='Number of EM iterations to perform')
    parser.add_argument('--tied', action='store_true',
                        help='If provided, use a single covariance matrix for all clusters.')
    args = parser.parse_args()
    if args.tied and args.clusters_file:
        print(
            'You don\'t have to (and should not) implement tied covariances when initializing from a file. Don\'t provide --tied and --clusters_file together.')
        exit(1)

    train_xs, dev_xs = parse_data(args)
    model = init_model(args)
    model = train_model(model, train_xs, dev_xs, args)
    nll_train = average_log_likelihood(model, train_xs, args)
    print('Train LL: {}'.format(nll_train))
    if not args.nodev:
        nll_dev = average_log_likelihood(model, dev_xs, args)
        print('Dev LL: {}'.format(nll_dev))
    initials, transitions, mus, sigmas = extract_parameters(model)
    if args.print_params:
        def intersperse(s):
            return lambda a: s.join(map(str, a))

        print('Initials: {}'.format(intersperse(' | ')(np.nditer(initials))))
        print('Transitions: {}'.format(intersperse(' | ')(map(intersperse(' '), transitions))))
        print('Mus: {}'.format(intersperse(' | ')(map(intersperse(' '), mus))))
        if args.tied:
            print('Sigma: {}'.format(intersperse(' ')(np.nditer(sigmas))))
        else:
            print('Sigmas: {}'.format(intersperse(' | ')(map(intersperse(' '), map(lambda s: np.nditer(s), sigmas)))))


if __name__ == '__main__':
    main()

